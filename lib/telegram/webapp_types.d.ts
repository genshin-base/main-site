/** generated by scripts/tg/update_webapp_types.js */

declare global {
  interface Window { Telegram: { WebApp: WebApp } }
}

export interface EventMap {
  /**
   * Occurs whenever theme settings are changed in the user's Telegram app (including switching to night mode).
   *
   * *eventHandler* receives no parameters, new theme settings and color scheme can be received via *this.themeParams* and *this.colorScheme* respectively.
   */
  themeChanged: void
  /**
   * Occurs when the visible section of the Mini App is changed.
   *
   * *eventHandler* receives an object with the single field *isStateStable*. If *isStateStable* is true, the resizing of the Mini App is finished. If it is false, the resizing is ongoing (the user is expanding or collapsing the Mini App or an animated object is playing). The current value of the visible section’s height is available in *this.viewportHeight*.
   */
  viewportChanged: { isStateStable: boolean }
  /**
   * Occurs when the [main button](https://core.telegram.org/bots/webapps#mainbutton) is pressed.
   *
   * *eventHandler* receives no parameters.
   */
  mainButtonClicked: void
  /**
   * **Bot API 6.1+** Occurrs when the [back button](https://core.telegram.org/bots/webapps#backbutton) is pressed.
   *
   * *eventHandler* receives no parameters.
   */
  backButtonClicked: void
  /**
   * **Bot API 6.1+** Occurrs when the Settings item in context menu is pressed.
   *
   * *eventHandler* receives no parameters.
   */
  settingsButtonClicked: void
  /**
   * **Bot API 6.1+** Occurrs when the opened invoice is closed.
   *
   * *eventHandler* receives an object with the two fields: *url* – invoice link provided and *status* – one of the invoice statuses:
   *
   * - **paid** – invoice was paid successfully,
   *
   * - **cancelled** – user closed this invoice without paying,
   *
   * - **failed** – user tried to pay, but the payment was failed,
   *
   * - **pending** – the payment is still processing. The bot will receive a service message about a [successful payment](https://core.telegram.org/bots/api#successfulpayment) when the payment is successfully paid.
   */
  invoiceClosed: { url: string, status: 'paid' | 'cancelled' | 'failed' | 'pending' }
  /**
   * **Bot API 6.2+** Occurrs when the opened popup is closed.
   *
   * *eventHandler* receives an object with the single field *button\_id* – the value of the field *id* of the pressed button. If no buttons were pressed, the field *button\_id* will be *null*.
   */
  popupClosed: { button_id: string | null }
  /**
   * **Bot API 6.4+** Occurs when the QR code scanner catches a code with text data.
   *
   * *eventHandler* receives an object with the single field *data* containing text data from the QR code.
   */
  qrTextReceived: { data: string }
  /**
   * **Bot API 6.4+** Occurrs when the `readTextFromClipboard` method is called.
   *
   * *eventHandler* receives an object with the single field *data* containing text data from the clipboard. If the clipboard contains non-text data, the field *data* will be an empty string. If the Mini App has no access to the clipboard, the field *data* will be *null*.
   */
  clipboardTextReceived: { data: string | null }
  /**
   * **Bot API 6.9+** Occurs when the write permission was requested.
   *
   * *eventHandler* receives an object with the single field *status* containing one of the statuses:
   *
   * - **allowed** – user granted write permission to the bot,
   *
   * - **cancelled** – user declined this request.
   */
  writeAccessRequested: { status: 'allowed' | 'cancelled' }
  /**
   * **Bot API 6.9+** Occurrs when the user's phone number was requested.
   *
   * *eventHandler* receives an object with the single field *status* containing one of the statuses:
   *
   * - **sent** – user shared their phone number with the bot,
   *
   * - **cancelled** – user declined this request.
   */
  contactRequested: { status: 'sent' | 'cancelled' }
}
/**
 * To connect your Mini App to the Telegram client, place the script [telegram-web-app.js](https://telegram.org/js/telegram-web-app.js) in the `<head>` tag before any other scripts, using this code:
 * 
 * ```
 * <script src="https://telegram.org/js/telegram-web-app.js"></script>
 * ```
 * 
 * Once the script is connected, a `window.Telegram.WebApp` object will become available with the following fields:
 */
export interface WebApp {
  /**
   * A string with raw data transferred to the Mini App, convenient for [validating data](https://core.telegram.org/bots/webapps#validating-data-received-via-the-mini-app).
   * 
   * **WARNING:** [Validate data](https://core.telegram.org/bots/webapps#validating-data-received-via-the-mini-app) from this field before using it on the bot's server.
   */
  initData: string
  /**
   * An object with input data transferred to the Mini App.
   * 
   * **WARNING:** Data from this field should not be trusted. You should only use data from *initData* on the bot's server and only after it has been [validated](https://core.telegram.org/bots/webapps#validating-data-received-via-the-mini-app).
   */
  initDataUnsafe: WebAppInitData
  /**
   * The version of the Bot API available in the user's Telegram app.
   */
  version: string
  /**
   * The name of the platform of the user's Telegram app.
   */
  platform: string
  /**
   * The color scheme currently used in the Telegram app. Either “light” or “dark”.
   * 
   * Also available as the CSS variable `var(--tg-color-scheme)`.
   */
  colorScheme: 'light' | 'dark'
  /**
   * An object containing the current theme settings used in the Telegram app.
   */
  themeParams: ThemeParams
  /**
   * *True*, if the Mini App is expanded to the maximum available height. False, if the Mini App occupies part of the screen and can be expanded to the full height using the **expand()** method.
   */
  isExpanded: boolean
  /**
   * The current height of the visible area of the Mini App. Also available in CSS as the variable `var(--tg-viewport-height)`.
   * 
   * The application can display just the top part of the Mini App, with its lower part remaining outside the screen area. From this position, the user can “pull” the Mini App to its maximum height, while the bot can do the same by calling the **expand()** method. As the position of the Mini App changes, the current height value of the visible area will be updated in real time.
   * 
   * Please note that the refresh rate of this value is not sufficient to smoothly follow the lower border of the window. It should not be used to pin interface elements to the bottom of the visible area. It's more appropriate to use the value of the `viewportStableHeight` field for this purpose.
   * 
   * (Float)
   */
  viewportHeight: number
  /**
   * The height of the visible area of the Mini App in its last stable state. Also available in CSS as a variable `var(--tg-viewport-stable-height)`.
   * 
   * The application can display just the top part of the Mini App, with its lower part remaining outside the screen area. From this position, the user can “pull” the Mini App to its maximum height, while the bot can do the same by calling the **expand()** method. Unlike the value of `viewportHeight`, the value of `viewportStableHeight` does not change as the position of the Mini App changes with user gestures or during animations. The value of `viewportStableHeight` will be updated after all gestures and animations are completed and the Mini App reaches its final size.
   * 
   * *Note the [event](https://core.telegram.org/bots/webapps#events-available-for-mini-apps) `viewportChanged` with the passed parameter `isStateStable=true`, which will allow you to track when the stable state of the height of the visible area changes.*
   * 
   * (Float)
   */
  viewportStableHeight: number
  /**
   * Current header color in the `#RRGGBB` format.
   */
  headerColor: string
  /**
   * Current background color in the `#RRGGBB` format.
   */
  backgroundColor: string
  /**
   * *True*, if the confirmation dialog is enabled while the user is trying to close the Mini App. *False*, if the confirmation dialog is disabled.
   */
  isClosingConfirmationEnabled: boolean
  /**
   * An object for controlling the back button which can be displayed in the header of the Mini App in the Telegram interface.
   */
  BackButton: BackButton
  /**
   * An object for controlling the main button, which is displayed at the bottom of the Mini App in the Telegram interface.
   */
  MainButton: MainButton
  /**
   * An object for controlling haptic feedback.
   */
  HapticFeedback: HapticFeedback
  /**
   * An object for controlling cloud storage.
   */
  CloudStorage: CloudStorage
  /**
   * Returns true if the user's app supports a version of the Bot API that is equal to or higher than the version passed as the parameter.
   */
  isVersionAtLeast(version: string): boolean
  /**
   * **Bot API 6.1+** A method that sets the app header color in the `#RRGGBB` format. You can also use keywords *bg\_color* and *secondary\_bg\_color*.
   * 
   * Up to **Bot API 6.9** You can only pass *Telegram.WebApp.themeParams.bg\_color* or *Telegram.WebApp.themeParams.secondary\_bg\_color* as a color or *bg\_color*, *secondary\_bg\_color* keywords.
   */
  setHeaderColor(color: string): void
  /**
   * **Bot API 6.1+** A method that sets the app background color in the `#RRGGBB` format. You can also use keywords *bg\_color* and *secondary\_bg\_color*.
   */
  setBackgroundColor(color: string): void
  /**
   * **Bot API 6.2+** A method that enables a confirmation dialog while the user is trying to close the Mini App.
   */
  enableClosingConfirmation(): void
  /**
   * **Bot API 6.2+** A method that disables the confirmation dialog while the user is trying to close the Mini App.
   */
  disableClosingConfirmation(): void
  /**
   * A method that sets the app event handler. Check [the list of available events](https://core.telegram.org/bots/webapps#events-available-for-mini-apps).
   */
  onEvent<K extends keyof EventMap>(eventType:K, eventHandler:(this:WebApp, arg:EventMap[K]) => unknown): void
  /**
   * A method that deletes a previously set event handler.
   */
  offEvent<K extends keyof EventMap>(eventType:K, eventHandler:(this:WebApp, arg:EventMap[K]) => unknown): void
  /**
   * A method used to send data to the bot. When this method is called, a service message is sent to the bot containing the data *data* of the length up to 4096 bytes, and the Mini App is closed. See the field *web\_app\_data* in the class [Message](/bots/api#message).
   * 
   * *This method is only available for Mini Apps launched via a [Keyboard button](https://core.telegram.org/bots/webapps#keyboard-button-mini-apps).*
   */
  sendData(data: string): void
  /**
   * **Bot API 6.7+** A method that inserts the bot's username and the specified inline *query* in the current chat's input field. Query may be empty, in which case only the bot's username will be inserted. If an optional *choose\_chat\_types* parameter was passed, the client prompts the user to choose a specific chat, then opens that chat and inserts the bot's username and the specified inline query in the input field. You can specify which types of chats the user will be able to choose from. It can be one or more of the following types: *users*, *bots*, *groups*, *channels*.
   */
  switchInlineQuery(query: string, choose_chat_types?: 'users' | 'bots' | 'groups' | 'channels'): void
  /**
   * A method that opens a link in an external browser. The Mini App will *not* be closed.
   * 
   * **Bot API 6.4+** If the optional *options* parameter is passed with the field *try\_instant\_view=true*, the link will be opened in [Instant View](https://instantview.telegram.org/) mode if possible.
   * 
   * *Note that this method can be called only in response to user interaction with the Mini App interface (e.g. a click inside the Mini App or on the main button)*
   */
  openLink(url: string, options?: { try_instant_view: boolean }): void
  /**
   * A method that opens a telegram link inside Telegram app. The Mini App *will* be closed.
   */
  openTelegramLink(url: string): void
  /**
   * **Bot API 6.1+** A method that opens an invoice using the link *url*. The Mini App will receive the [event](https://core.telegram.org/bots/webapps#events-available-for-mini-apps) *invoiceClosed* when the invoice is closed. If an optional *callback* parameter was passed, the *callback* function will be called and the invoice status will be passed as the first argument.
   */
  openInvoice(url: string, callback?: (status: EventMap['invoiceClosed']['status']) => unknown): void
  /**
   * **Bot API 6.2+** A method that shows a native popup described by the *params* argument of the type [PopupParams](https://core.telegram.org/bots/webapps#popupparams). The Mini App will receive the [event](https://core.telegram.org/bots/webapps#events-available-for-mini-apps) *popupClosed* when the popup is closed. If an optional *callback* parameter was passed, the *callback* function will be called and the field *id* of the pressed button will be passed as the first argument.
   */
  showPopup(params: PopupParams, callback?: (button_id: string) => unknown): void
  /**
   * **Bot API 6.2+** A method that shows *message* in a simple alert with a 'Close' button. If an optional *callback* parameter was passed, the *callback* function will be called when the popup is closed.
   */
  showAlert(message: string, callback?: () => unknown): void
  /**
   * **Bot API 6.2+** A method that shows *message* in a simple confirmation window with 'OK' and 'Cancel' buttons. If an optional *callback* parameter was passed, the *callback* function will be called when the popup is closed and the first argument will be a boolean indicating whether the user pressed the 'OK' button.
   */
  showConfirm(message: string, callback?: (isOk: boolean) => unknown): void
  /**
   * **Bot API 6.4+** A method that shows a native popup for scanning a QR code described by the *params* argument of the type [ScanQrPopupParams](https://core.telegram.org/bots/webapps#scanqrpopupparams). The Mini App will receive the [event](https://core.telegram.org/bots/webapps#events-available-for-mini-apps) *qrTextReceived* every time the scanner catches a code with text data. If an optional *callback* parameter was passed, the *callback* function will be called and the text from the QR code will be passed as the first argument. Returning *true* inside this callback function causes the popup to be closed.
   */
  showScanQrPopup(params: ScanQrPopupParams, callback?: (text: string) => true|void): void
  /**
   * **Bot API 6.4+** A method that closes the native popup for scanning a QR code opened with the *showScanQrPopup* method. Run it if you received valid data in the [event](https://core.telegram.org/bots/webapps#events-available-for-mini-apps) *qrTextReceived*.
   */
  closeScanQrPopup(): void
  /**
   * **Bot API 6.4+** A method that requests text from the clipboard. The Mini App will receive the [event](https://core.telegram.org/bots/webapps#events-available-for-mini-apps) *clipboardTextReceived*. If an optional *callback* parameter was passed, the *callback* function will be called and the text from the clipboard will be passed as the first argument.
   * 
   * *Note: this method can be called only for Mini Apps launched from the attachment menu and only in response to a user interaction with the Mini App interface (e.g. a click inside the Mini App or on the main button).*
   */
  readTextFromClipboard(callback?: (text: string) => unknown): void
  /**
   * **Bot API 6.9+** A method that shows a native popup requesting permission for the bot to send messages to the user. If an optional *callback* parameter was passed, the *callback* function will be called when the popup is closed and the first argument will be a boolean indicating whether the user granted this access.
   */
  requestWriteAccess(callback?: (accessGranted: boolean) => unknown): void
  /**
   * **Bot API 6.9+** A method that shows a native popup prompting the user for their phone number. If an optional *callback* parameter was passed, the *callback* function will be called when the popup is closed and the first argument will be a boolean indicating whether the user shared its phone number.
   */
  requestContact(callback?: (wasProvided: boolean) => unknown): void
  /**
   * A method that informs the Telegram app that the Mini App is ready to be displayed.
   * 
   * It is recommended to call this method as early as possible, as soon as all essential interface elements are loaded. Once this method is called, the loading placeholder is hidden and the Mini App is shown.
   * 
   * If the method is not called, the placeholder will be hidden only when the page is fully loaded.
   */
  ready(): void
  /**
   * A method that expands the Mini App to the maximum available height. To find out if the Mini App is expanded to the maximum height, refer to the value of the *Telegram.WebApp.isExpanded* parameter
   */
  expand(): void
  /**
   * A method that closes the Mini App.
   */
  close(): void
}

/**
 * Mini Apps can [adjust the appearance](https://core.telegram.org/bots/webapps#color-schemes) of the interface to match the Telegram user's app in real time. This object contains the user's current theme settings:
 */
export interface ThemeParams {
  /**
   * *Optional*. Background color in the `#RRGGBB` format.
   * 
   * Also available as the CSS variable `var(--tg-theme-bg-color)`.
   */
  bg_color?: string
  /**
   * *Optional*. Main text color in the `#RRGGBB` format.
   * 
   * Also available as the CSS variable `var(--tg-theme-text-color)`.
   */
  text_color?: string
  /**
   * *Optional*. Hint text color in the `#RRGGBB` format.
   * 
   * Also available as the CSS variable `var(--tg-theme-hint-color)`.
   */
  hint_color?: string
  /**
   * *Optional*. Link color in the `#RRGGBB` format.
   * 
   * Also available as the CSS variable `var(--tg-theme-link-color)`.
   */
  link_color?: string
  /**
   * *Optional*. Button color in the `#RRGGBB` format.
   * 
   * Also available as the CSS variable `var(--tg-theme-button-color)`.
   */
  button_color?: string
  /**
   * *Optional*. Button text color in the `#RRGGBB` format.
   * 
   * Also available as the CSS variable `var(--tg-theme-button-text-color)`.
   */
  button_text_color?: string
  /**
   * *Optional*. **Bot API 6.1+** Secondary background color in the `#RRGGBB` format.
   * 
   * Also available as the CSS variable `var(--tg-theme-secondary-bg-color)`.
   */
  secondary_bg_color?: string
}

/**
 * This object describes the native popup.
 */
export interface PopupParams {
  /**
   * *Optional*. The text to be displayed in the popup title, 0-64 characters.
   */
  title?: string
  /**
   * The message to be displayed in the body of the popup, 1-256 characters.
   */
  message: string
  /**
   * *Optional*. List of buttons to be displayed in the popup, 1-3 buttons. Set to *\[{“type”:“close”}\]* by default.
   */
  buttons?: PopupButton[]
}

/**
 * This object describes the native popup for scanning QR codes.
 */
export interface ScanQrPopupParams {
  /**
   * *Optional*. The text to be displayed under the 'Scan QR' heading, 0-64 characters.
   */
  text?: string
}

/**
 * This object describes the native popup button.
 */
export interface PopupButton {
  /**
   * *Optional*. Identifier of the button, 0-64 characters. Set to empty string by default.
   * 
   * If the button is pressed, its *id* is returned in the callback and the *popupClosed* event.
   */
  id?: string
  /**
   * *Optional*. Type of the button. Set to *default* by default.
   * 
   * Can be one of these values:
   * 
   * - *default*, a button with the default style,
   * 
   * - *ok*, a button with the localized text “OK”,
   * 
   * - *close*, a button with the localized text “Close”,
   * 
   * - *cancel*, a button with the localized text “Cancel”,
   * 
   * - *destructive*, a button with a style that indicates a destructive action (e.g. “Remove”, “Delete”, etc.).
   */
  type?: string
  /**
   * *Optional*. The text to be displayed on the button, 0-64 characters. Required if *type* is *default* or *destructive*. Irrelevant for other types.
   */
  text?: string
}

/**
 * This object controls the **back** button, which can be displayed in the header of the Mini App in the Telegram interface.
 */
export interface BackButton {
  /**
   * Shows whether the button is visible. Set to *false* by default.
   */
  isVisible: boolean
  /**
   * **Bot API 6.1+** A method that sets the button press event handler. An alias for `Telegram.WebApp.onEvent('backButtonClicked', callback)`
   */
  onClick(callback: () => unknown): void
  /**
   * **Bot API 6.1+** A method that removes the button press event handler. An alias for `Telegram.WebApp.offEvent('backButtonClicked', callback)`
   */
  offClick(callback: () => unknown): void
  /**
   * **Bot API 6.1+** A method to make the button active and visible.
   */
  show(): void
  /**
   * **Bot API 6.1+** A method to hide the button.
   */
  hide(): void
}

/**
 * This object controls the main button, which is displayed at the bottom of the Mini App in the Telegram interface.
 */
export interface MainButton {
  /**
   * Current button text. Set to *CONTINUE* by default.
   */
  text: string
  /**
   * Current button color. Set to *themeParams.button\_color* by default.
   */
  color: string
  /**
   * Current button text color. Set to *themeParams.button\_text\_color* by default.
   */
  textColor: string
  /**
   * Shows whether the button is visible. Set to *false* by default.
   */
  isVisible: boolean
  /**
   * Shows whether the button is active. Set to *true* by default.
   */
  isActive: boolean
  /**
   * *Readonly.* Shows whether the button is displaying a loading indicator.
   */
  isProgressVisible: boolean
  /**
   * A method to set the button text.
   */
  setText(text: string): void
  /**
   * A method that sets the button press event handler. An alias for `Telegram.WebApp.onEvent('mainButtonClicked', callback)`
   */
  onClick(callback: () => unknown): void
  /**
   * A method that removes the button press event handler. An alias for `Telegram.WebApp.offEvent('mainButtonClicked', callback)`
   */
  offClick(callback: () => unknown): void
  /**
   * A method to make the button visible.
   * 
   * *Note that opening the Mini App from the [attachment menu](https://core.telegram.org/bots/webapps#launching-mini-apps-from-the-attachment-menu) hides the main button until the user interacts with the Mini App interface.*
   */
  show(): void
  /**
   * A method to hide the button.
   */
  hide(): void
  /**
   * A method to enable the button.
   */
  enable(): void
  /**
   * A method to disable the button.
   */
  disable(): void
  /**
   * A method to show a loading indicator on the button.
   * 
   * It is recommended to display loading progress if the action tied to the button may take a long time. By default, the button is disabled while the action is in progress. If the parameter `leaveActive=true` is passed, the button remains enabled.
   */
  showProgress(leaveActive: boolean): void
  /**
   * A method to hide the loading indicator.
   */
  hideProgress(): void
  /**
   * A method to set the button parameters. The *params* parameter is an object containing one or several fields that need to be changed:
   * 
   * **text** - button text;
   * 
   * **color** - button color;
   * 
   * **text\_color** - button text color;
   * 
   * **is\_active** - enable the button;
   * 
   * **is\_visible** - show the button.
   */
  setParams(params: { text: string, color: string, text_color: string, is_active: boolean, is_visible: boolean }): void
}

/**
 * This object controls haptic feedback.
 */
export interface HapticFeedback {
  /**
   * **Bot API 6.1+** A method tells that an impact occurred. The Telegram app may play the appropriate haptics based on style value passed. Style can be one of these values:
   * 
   * - *light*, indicates a collision between small or lightweight UI objects,
   * 
   * - *medium*, indicates a collision between medium-sized or medium-weight UI objects,
   * 
   * - *heavy*, indicates a collision between large or heavyweight UI objects,
   * 
   * - *rigid*, indicates a collision between hard or inflexible UI objects,
   * 
   * - *soft*, indicates a collision between soft or flexible UI objects.
   */
  impactOccurred(style: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft'): void
  /**
   * **Bot API 6.1+** A method tells that a task or action has succeeded, failed, or produced a warning. The Telegram app may play the appropriate haptics based on type value passed. Type can be one of these values:
   * 
   * - *error*, indicates that a task or action has failed,
   * 
   * - *success*, indicates that a task or action has completed successfully,
   * 
   * - *warning*, indicates that a task or action produced a warning.
   */
  notificationOccurred(type: 'error' | 'success' | 'warning'): void
  /**
   * **Bot API 6.1+** A method tells that the user has changed a selection. The Telegram app may play the appropriate haptics.
   * 
   * *Do not use this feedback when the user makes or confirms a selection; use it only when the selection changes.*
   */
  selectionChanged(): void
}

/**
 * This object controls the cloud storage. Each bot can store up to 1024 items per user in the cloud storage.
 */
export interface CloudStorage {
  /**
   * **Bot API 6.9+** A method that stores a value in the cloud storage using the specified key. The key should contain 1-128 characters, only `A-Z`, `a-z`, `0-9`, `\_` and `-` are allowed. The value should contain 0-4096 characters. You can store up to 1024 keys in the cloud storage. If an optional *callback* parameter was passed, the *callback* function will be called. In case of an error, the first argument will contain the error. In case of success, the first argument will be *null* and the second argument will be a boolean indicating whether the value was stored.
   */
  setItem(key: string, value: string, callback?: (err: Error | null, wasStored: boolean) => unknown): void
  /**
   * **Bot API 6.9+** A method that receives a value from the cloud storage using the specified key. The key should contain 1-128 characters, only `A-Z`, `a-z`, `0-9`, `\_` and `-` are allowed. In case of an error, the *callback* function will be called and the first argument will contain the error. In case of success, the first argument will be *null* and the value will be passed as the second argument.
   */
  getItem(key: string, callback: (err: Error | null, value: string) => unknown): void
  /**
   * **Bot API 6.9+** A method that receives values from the cloud storage using the specified keys. The keys should contain 1-128 characters, only `A-Z`, `a-z`, `0-9`, `\_` and `-` are allowed. In case of an error, the *callback* function will be called and the first argument will contain the error. In case of success, the first argument will be *null* and the values will be passed as the second argument.
   */
  getItems(keys: string[], callback: (err: Error | null, values: Record<string, string>) => unknown): void
  /**
   * **Bot API 6.9+** A method that removes a value from the cloud storage using the specified key. The key should contain 1-128 characters, only `A-Z`, `a-z`, `0-9`, `\_` and `-` are allowed. If an optional *callback* parameter was passed, the *callback* function will be called. In case of an error, the first argument will contain the error. In case of success, the first argument will be *null* and the second argument will be a boolean indicating whether the value was removed.
   */
  removeItem(key: string, callback?: (err: Error | null, wasRemoved: boolean) => unknown): void
  /**
   * **Bot API 6.9+** A method that removes values from the cloud storage using the specified keys. The keys should contain 1-128 characters, only `A-Z`, `a-z`, `0-9`, `\_` and `-` are allowed. If an optional *callback* parameter was passed, the *callback* function will be called. In case of an error, the first argument will contain the error. In case of success, the first argument will be *null* and the second argument will be a boolean indicating whether the values were removed.
   */
  removeItems(keys: string[], callback?: (err: Error | null, wereRemoved: boolean) => unknown): void
  /**
   * **Bot API 6.9+** A method that receives the list of all keys stored in the cloud storage. In case of an error, the *callback* function will be called and the first argument will contain the error. In case of success, the first argument will be *null* and the list of keys will be passed as the second argument.
   */
  getKeys(callback: (err: Error | null, keys: string[]) => unknown): void
}

/**
 * This object contains data that is transferred to the Mini App when it is opened. It is empty if the Mini App was launched from a [keyboard button](https://core.telegram.org/bots/webapps#keyboard-button-mini-apps) or from [inline mode](https://core.telegram.org/bots/webapps#inline-mode-mini-apps).
 */
export interface WebAppInitData {
  /**
   * *Optional.* A unique identifier for the Mini App session, required for sending messages via the [answerWebAppQuery](/bots/api#answerwebappquery) method.
   */
  query_id?: string
  /**
   * *Optional.* An object containing data about the current user.
   */
  user?: WebAppUser
  /**
   * *Optional.* An object containing data about the chat partner of the current user in the chat where the bot was launched via the attachment menu. Returned only for private chats and only for Mini Apps launched via the attachment menu.
   */
  receiver?: WebAppUser
  /**
   * *Optional.* An object containing data about the chat where the bot was launched via the attachment menu. Returned for supergroups, channels and group chats – only for Mini Apps launched via the attachment menu.
   */
  chat?: WebAppChat
  /**
   * *Optional.* Type of the chat from which the Mini App was opened. Can be either “sender” for a private chat with the user opening the link, “private”, “group”, “supergroup”, or “channel”. Returned only for Mini Apps launched from direct links.
   */
  chat_type?: string
  /**
   * *Optional.* Global identifier, uniquely corresponding to the chat from which the Mini App was opened. Returned only for Mini Apps launched from a direct link.
   */
  chat_instance?: string
  /**
   * *Optional.* The value of the *startattach* parameter, passed [via link](https://core.telegram.org/bots/webapps#adding-bots-to-the-attachment-menu). Only returned for Mini Apps when launched from the attachment menu via link.
   * 
   * The value of the `start\_param` parameter will also be passed in the GET-parameter `tgWebAppStartParam`, so the Mini App can load the correct interface right away.
   */
  start_param?: string
  /**
   * *Optional.* Time in seconds, after which a message can be sent via the [answerWebAppQuery](/bots/api#answerwebappquery) method.
   * 
   * (Integer)
   */
  can_send_after?: number
  /**
   * Unix time when the form was opened.
   * 
   * (Integer)
   */
  auth_date: number
  /**
   * A hash of all passed parameters, which the bot server can use to [check their validity](https://core.telegram.org/bots/webapps#validating-data-received-via-the-mini-app).
   */
  hash: string
}

/**
 * This object contains the data of the Mini App user.
 */
export interface WebAppUser {
  /**
   * A unique identifier for the user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. It has at most 52 significant bits, so a 64-bit integer or a double-precision float type is safe for storing this identifier.
   * 
   * (Integer)
   */
  id: number
  /**
   * *Optional*. *True*, if this user is a bot. Returns in the [receiver](https://core.telegram.org/bots/webapps#webappinitdata) field only.
   */
  is_bot?: boolean
  /**
   * First name of the user or bot.
   */
  first_name: string
  /**
   * *Optional*. Last name of the user or bot.
   */
  last_name?: string
  /**
   * *Optional*. Username of the user or bot.
   */
  username?: string
  /**
   * *Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user's language. Returns in *user* field only.
   */
  language_code?: string
  /**
   * *Optional*. *True*, if this user is a Telegram Premium user.
   */
  is_premium?: true
  /**
   * *Optional*. *True*, if this user added the bot to the attachment menu.
   */
  added_to_attachment_menu?: true
  /**
   * *Optional*. *True*, if this user allowed the bot to message them.
   */
  allows_write_to_pm?: true
  /**
   * *Optional*. URL of the user’s profile photo. The photo can be in.jpeg or.svg formats. Only returned for Mini Apps launched from the attachment menu.
   */
  photo_url?: string
}

/**
 * This object represents a chat.
 */
export interface WebAppChat {
  /**
   * Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
   * 
   * (Integer)
   */
  id: number
  /**
   * Type of chat, can be either “group”, “supergroup” or “channel”
   */
  type: 'group' | 'supergroup' | 'channel'
  /**
   * Title of the chat
   */
  title: string
  /**
   * *Optional*. Username of the chat
   */
  username?: string
  /**
   * *Optional*. URL of the chat’s photo. The photo can be in.jpeg or.svg formats. Only returned for Mini Apps launched from the attachment menu.
   */
  photo_url?: string
}

