import { useCallback, useRef, useState } from 'preact/hooks'

import { $LANG_NAME, $LANG_NAMES } from '#src/i18n'
import { A, makeLocationHrefForLang } from '#src/routes/router'
import { useClickAway } from '#src/utils/hooks'
import { VARIATION_SELECTOR } from '#src/utils/typography'

type Props = { isNavExpanded: boolean }

export function Nav({ isNavExpanded }: Props): JSX.Element {
	const [isExpanded, setIsExpanded] = useState(false)
	const ddRef = useRef(null)
	const closeDd = useCallback(() => isExpanded && setIsExpanded(false), [setIsExpanded, isExpanded])
	const openDd = useCallback(() => !isExpanded && setIsExpanded(true), [setIsExpanded, isExpanded])

	// TODO –∫–ª–∏–∫ –º–∏–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
	useClickAway(ddRef, closeDd)

	return (
		<div className={`collapse navbar-collapse ${isNavExpanded ? 'show' : ''}`}>
			<ul className="navbar-nav me-auto mb-2 mb-md-0">
				<li className="nav-item">
					<A className="nav-link active" href="/builds">
						Builds
					</A>
				</li>
				<li className="nav-item">
					<a className="nav-link active" href="#">
						About
					</a>
				</li>
			</ul>
			<ul className="navbar-nav mb-2 mb-md-0 float-md-end">
				<li className="nav-item dropdown">
					<a
						className={`nav-link dropdown-toggle ${isExpanded ? 'show' : ''}`}
						id="navbarDropdown"
						role="button"
						onClick={openDd}
					>
						üåê{VARIATION_SELECTOR} {$LANG_NAME}
					</a>
					{/* todo –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–ª–∞—Å—Å dropdown-menu-end */}
					<ul
						className={`dropdown-menu ${isExpanded ? 'show' : ''}`}
						style={'right: 0'}
						ref={ddRef}
					>
						{/* –í –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ—è—Ö –±—É–¥—É—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ —Å–º–µ–Ω–∏—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞,
						–∞ —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–µ–Ω (–µ—Å–ª–∏ —Ç—É—Ç —Ç–∞–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è useMemo).
						–¢–∞–∫ —á—Ç–æ —è–≤–Ω–æ –≥–µ–Ω–µ—Ä–∏–º —Å–æ–∂–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –¥—Ä–æ–ø–¥–∞—É–Ω–∞. */}
						{isExpanded &&
							BUNDLE_ENV.LANGS.map(lang => (
								<li key={lang}>
									<a className="dropdown-item" href={makeLocationHrefForLang(lang)}>
										{$LANG_NAMES[lang]}
									</a>
								</li>
							))}
					</ul>
				</li>
			</ul>
		</div>
	)
}
